//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server.Properties {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Server.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   使用此强类型资源类，为所有资源查找
        ///   重写当前线程的 CurrentUICulture 属性。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 
        ///rem dotnet restore
        ///
        ///rem cd src/Module/Admin &amp;&amp; dotnet build &amp;&amp; cd ../../../
        ///rem cd src/Module/Order &amp;&amp; dotnet build &amp;&amp; cd ../../../
        ///rem cd src/Module/Search &amp;&amp; dotnet build &amp;&amp; cd ../../../
        ///
        ///dotnet build
        ///
        ///rem cd src/WebHost &amp;&amp; npm install &amp;&amp; npm install --global gulp-cli &amp;&amp; gulp copy-module
        ///cd src/WebHost &amp;&amp; gulp copy-module &amp;&amp; cd ../../
        ///
        ///echo &quot;Then type &apos;dotnet run&apos; in src/WebHost to start the app.&quot;
        ///
        ///pause 的本地化字符串。
        /// </summary>
        internal static string _build_bat {
            get {
                return ResourceManager.GetString("_build_bat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 ###############################################################################
        ///# Set default behavior to automatically normalize line endings.
        ///###############################################################################
        ///* text=auto
        ///
        ///###############################################################################
        ///# Set default behavior for command prompt diff.
        ///#
        ///# This is need for earlier builds of msysgit that does not have it on by
        ///# default for csharp files.
        ///# Note: This is only used by comma [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _gitattributes {
            get {
                return ResourceManager.GetString("_gitattributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 ## Ignore Visual Studio temporary files, build results, and
        ///## files generated by popular Visual Studio add-ons.
        ///
        ///# User-specific files
        ///*.suo
        ///*.user
        ///*.userosscache
        ///*.sln.docstates
        ///
        ///# User-specific files (MonoDevelop/Xamarin Studio)
        ///*.userprefs
        ///
        ///# Build results
        ///[Dd]ebug/
        ///[Dd]ebugPublic/
        ///[Rr]elease/
        ///[Rr]eleases/
        ///[Xx]64/
        ///[Xx]86/
        ///[Bb]uild/
        ///bld/
        ///[Bb]in/
        ///[Oo]bj/
        ///
        ///# Visual Studio 2015 cache/options directory
        ///.vs/
        ///# Uncomment if you have tasks that create the project&apos;s static files in wwwr [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string _gitignore {
            get {
                return ResourceManager.GetString("_gitignore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Threading;
        ///using System.Text.RegularExpressions;
        ///using System.Net;
        ///using Microsoft.Extensions.Logging;
        ///
        ///namespace CSRedis {
        ///	/// &lt;summary&gt;
        ///	/// Connection链接池
        ///	/// &lt;/summary&gt;
        ///	public partial class ConnectionPool {
        ///
        ///		public List&lt;RedisConnection2&gt; AllConnections = new List&lt;RedisConnection2&gt;();
        ///		public Queue&lt;RedisConnection2&gt; FreeConnections = new Queue&lt;RedisConnection2&gt;();
        ///		public Queue&lt;ManualResetEvent&gt; GetConnectionQueue = new Que [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_ConnectionPool_cs {
            get {
                return ResourceManager.GetString("CSRedis_ConnectionPool_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Provides data for the event that is raised when a subscription message is received
        ///    /// &lt;/summary&gt;
        ///    public class RedisSubscriptionReceivedEventArgs : EventArgs
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// The subscription message
        ///        /// &lt;/summary&gt;
        ///        public RedisSubscriptionMessage Message { get; private set; }
        ///
        ///        internal RedisSubscriptionRec [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Events_cs {
            get {
                return ResourceManager.GetString("CSRedis_Events_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///
        ///namespace CSRedis
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Represents a Redis server error reply
        ///    /// &lt;/summary&gt;
        ///    public class RedisException : RedisClientException
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// Instantiate a new instance of the RedisException class
        ///        /// &lt;/summary&gt;
        ///        /// &lt;param name=&quot;message&quot;&gt;Server response&lt;/param&gt;
        ///        public RedisException(string message)
        ///            : base(message)
        ///        { }
        ///    }
        ///
        ///    /// &lt;summary&gt;
        ///    /// The exception that is thr [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Exceptions_cs {
            get {
                return ResourceManager.GetString("CSRedis_Exceptions_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisArray : RedisCommand&lt;object[]&gt;
        ///    {
        ///        readonly Queue&lt;Func&lt;RedisReader, object&gt;&gt; _parsers = new Queue&lt;Func&lt;RedisReader, object&gt;&gt;();
        ///
        ///        public RedisArray(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override object[] Parse(RedisReader reader)
        ///        {
        ///         [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisArray_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisArray_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System.IO;
        ///
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisBool : RedisCommand&lt;bool&gt;
        ///    {
        ///        public RedisBool(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override bool Parse(RedisReader reader)
        ///        {
        ///            return reader.ReadInt() == 1;
        ///        }
        ///    }
        ///}
        /// 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisBool_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisBool_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 
        ///using CSRedis.Internal.IO;
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisBytes : RedisCommand&lt;byte[]&gt;
        ///    {
        ///        public RedisBytes(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override byte[] Parse(RedisReader reader)
        ///        {
        ///            return reader.ReadBulkBytes(true);
        ///        }
        ///    }
        ///}
        /// 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisBytes_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisBytes_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.IO;
        ///
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisDate : RedisCommand&lt;DateTime&gt;
        ///    {
        ///        static readonly DateTime _epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        ///
        ///        public RedisDate(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override DateTime Parse(RedisReader reader)
        ///        {
        ///            return FromTimestamp(reader.ReadInt());
        ///        }
        ///
        ///        [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisDate_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisDate_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.Globalization;
        ///
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisFloat : RedisCommand&lt;double&gt;
        ///    {
        ///        public RedisFloat(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override double Parse(RedisReader reader)
        ///        {
        ///            return FromString(reader.ReadBulkString());
        ///        }
        ///
        ///        static double FromString(string input)
        ///        {
        ///            return Double.Parse(i [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisFloat_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisFloat_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using CSRedis.Internal.Utilities;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.IO;
        ///using System.Reflection;
        ///
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisHash : RedisCommand&lt;Dictionary&lt;string, string&gt;&gt;
        ///    {
        ///        public RedisHash(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override Dictionary&lt;string, string&gt; Parse(RedisReader reader)
        ///        {
        ///          [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisHash_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisHash_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 
        ///using CSRedis.Internal.IO;
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisInt : RedisCommand&lt;long&gt;
        ///    {
        ///        public RedisInt(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override long Parse(RedisReader reader)
        ///        {
        ///            return reader.ReadInt();
        ///        }
        ///
        ///        public class Nullable : RedisCommand&lt;long?&gt;
        ///        {
        ///            public Nullable(string command, params object[] args)
        ///                : base(command,  [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisInt_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisInt_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisIsMasterDownByAddrCommand : RedisCommand&lt;RedisMasterState&gt;
        ///    {
        ///        public RedisIsMasterDownByAddrCommand(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override RedisMasterState Parse(RedisReader reader)
        ///        {
        ///            reader.ExpectType(RedisMessage.MultiBulk);
        /// [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisIsMasterDownByAddrCommand_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisIsMasterDownByAddrCommand_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 
        ///using CSRedis.Internal.IO;
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisObject : RedisCommand&lt;object&gt;
        ///    {
        ///        public RedisObject(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override object Parse(RedisReader reader)
        ///        {
        ///            return reader.Read();
        ///        }
        ///
        ///        public class Strings : RedisCommand&lt;object&gt;
        ///        {
        ///            public Strings(string command, params object[] args)
        ///                : base(com [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisObject_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisObject_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 
        ///using CSRedis.Internal.IO;
        ///using CSRedis.Internal.Utilities;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Globalization;
        ///using System.IO;
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisRoleCommand : RedisCommand&lt;RedisRole&gt;
        ///    {
        ///        public RedisRoleCommand(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override RedisRole Parse(RedisReader reader)
        ///        {
        ///            reader.ExpectT [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisRoleCommand_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisRoleCommand_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisScanCommand&lt;T&gt;: RedisCommand&lt;RedisScan&lt;T&gt;&gt;
        ///    {
        ///        RedisCommand&lt;T[]&gt; _command;
        ///
        ///        public RedisScanCommand(RedisCommand&lt;T[]&gt; command)
        ///            : base(command.Command, command.Arguments)
        ///        {
        ///            _command = command;
        ///        }
        ///
        ///        public override RedisScan&lt;T&gt; Parse(RedisReader r [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisScanCommand_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisScanCommand_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisSlowLogCommand : RedisCommand&lt;RedisSlowLogEntry&gt;
        ///    {
        ///        public RedisSlowLogCommand(string command, object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override RedisSlowLogEntry Parse(RedisReader reader)
        ///        {
        ///            reader.ExpectType(RedisMessage.MultiBulk);
        ///            reader.ExpectSi [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisSlowLogCommand_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisSlowLogCommand_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 
        ///using CSRedis.Internal.IO;
        ///using CSRedis.Internal.Utilities;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Globalization;
        ///using System.IO;
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisStatus : RedisCommand&lt;string&gt;
        ///    {
        ///        public RedisStatus(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override string Parse(RedisReader reader)
        ///        {
        ///            return reader.ReadStatus();
        ///  [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisStatus_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisStatus_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 
        ///using CSRedis.Internal.IO;
        ///using System;
        ///using System.ComponentModel;
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisString : RedisCommand&lt;string&gt;
        ///    {
        ///        public RedisString(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override string Parse(RedisReader reader)
        ///        {
        ///            return reader.ReadBulkString();
        ///        }
        ///
        ///        public class Nullable : RedisString
        ///        {
        ///            public Nullable(string command, p [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisString_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisString_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System.IO;
        ///
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisSubscription : RedisCommand&lt;RedisSubscriptionResponse&gt;
        ///    {
        ///        public RedisSubscription(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override RedisSubscriptionResponse Parse(RedisReader reader)
        ///        {
        ///            reader.ExpectType(RedisMessage.MultiBulk);
        ///            long count = reader.ReadInt(false);
        ///            string type = reade [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisSubscription_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisSubscription_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.ComponentModel;
        ///using System.IO;
        ///
        ///namespace CSRedis.Internal.Commands
        ///{
        ///    class RedisTuple : RedisCommand&lt;Tuple&lt;string, string&gt;&gt;
        ///    {
        ///        public RedisTuple(string command, params object[] args)
        ///            : base(command, args)
        ///        { }
        ///
        ///        public override Tuple&lt;string, string&gt; Parse(RedisReader reader)
        ///        {
        ///            reader.ExpectType(RedisMessage.MultiBulk);
        ///            reader.ExpectSize(2);
        ///            return Tup [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Commands_RedisTuple_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Commands_RedisTuple_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Net;
        ///using System.Net.Sockets;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.Fakes
        ///{
        ///    class FakeRedisSocket : IRedisSocket
        ///    {
        ///        bool _connected;
        ///        readonly FakeStream _stream;
        ///
        ///        public bool Connected { get { return _connected; } }
        ///
        ///        public int ReceiveTimeout { get; set; }
        ///
        ///        public int SendTimeout { get; set; }
        ///
        ///        publi [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Fakes_FakeRedisSocket_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Fakes_FakeRedisSocket_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.Fakes
        ///{
        ///    class FakeStream : MemoryStream
        ///    {
        ///        readonly Queue&lt;byte[]&gt; _responses;
        ///        readonly Queue&lt;byte[]&gt; _messages;
        ///
        ///        public FakeStream()
        ///        {
        ///            _responses = new Queue&lt;byte[]&gt;();
        ///            _messages = new Queue&lt;byte[]&gt;();
        ///        }
        ///
        ///        public void AddResponse(byte[] response)
        ///        {
        ///            _responses.En [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Fakes_FakeStream_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Fakes_FakeStream_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Concurrent;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Net;
        ///using System.Net.Sockets;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace CSRedis.Internal.IO
        ///{
        ///    class AsyncConnector : IDisposable
        ///    {
        ///        readonly SocketAsyncEventArgs _asyncConnectArgs;
        ///        readonly SocketAsyncPool _asyncTransferPool;
        ///        readonly ConcurrentQueue&lt;IRedisAsyncCommandToken&gt; _asyncReadQueue;
        ///        readonly ConcurrentQueue&lt;IRe [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_IO_AsyncConnector_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_IO_AsyncConnector_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Net;
        ///using System.Net.Sockets;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.IO
        ///{
        ///    interface IRedisSocket : IDisposable
        ///    {
        ///        bool Connected { get; }
        ///        int ReceiveTimeout { get; set; }
        ///        int SendTimeout { get; set; }
        ///        void Connect(EndPoint endpoint);
        ///        bool ConnectAsync(SocketAsyncEventArgs args);
        ///        bool SendAsync(SocketAsyncEventArgs args);
        ///        St [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_IO_IRedisSocket_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_IO_IRedisSocket_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace CSRedis.Internal.IO
        ///{
        ///    interface IRedisAsyncCommandToken
        ///    {
        ///        Task Task { get; }
        ///        RedisCommand Command { get; }
        ///        void SetResult(RedisReader reader);
        ///        void SetException(Exception e);
        ///    }
        ///
        ///    class RedisAsyncCommandToken&lt;T&gt; : IRedisAsyncCommandToken
        ///    {
        ///        readonly TaskCompletionSource&lt;T&gt; _tcs;
        ///  [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_IO_RedisAsyncCommandToken_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_IO_RedisAsyncCommandToken_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.IO
        ///{
        ///    class RedisIO : IDisposable
        ///    {
        ///        readonly RedisWriter _writer;
        ///        RedisReader _reader;
        ///        RedisPipeline _pipeline;
        ///        BufferedStream _stream;
        ///
        ///        public RedisWriter Writer { get { return _writer; } }
        ///        public RedisReader Reader { get { return GetOrThrow(_reader); } }
        ///        public Encoding Encoding { get; set; }
        ///     [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_IO_RedisIO_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_IO_RedisIO_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Net;
        ///using System.Net.Sockets;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.IO
        ///{
        ///    class RedisPooledSocket : IRedisSocket
        ///    {
        ///        Socket _socket;
        ///        readonly SocketPool _pool;
        ///
        ///        public bool Connected { get { return _socket == null ? false : _socket.Connected; } }
        ///
        ///        public int ReceiveTimeout
        ///        {
        ///            get { return _socket.ReceiveTimeout; }
        ///            s [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_IO_RedisPooledSocket_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_IO_RedisPooledSocket_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.IO;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.IO
        ///{
        ///    class RedisReader
        ///    {
        ///        readonly Stream _stream;
        ///        readonly RedisIO _io;
        ///
        ///        public RedisReader(RedisIO io)
        ///        {
        ///            _stream = io.Stream;
        ///            _io = io;
        ///        }
        ///
        ///        public RedisMessage ReadType()
        ///        {
        ///            RedisMessage type = (RedisMessage)_stream.ReadByte();
        ///            if (type == RedisMessage.Error)
        ///                throw new RedisException(R [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_IO_RedisReader_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_IO_RedisReader_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Net;
        ///using System.Net.Security;
        ///using System.Net.Sockets;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.IO
        ///{
        ///    class RedisSocket : IRedisSocket
        ///    {
        ///        readonly bool _ssl;
        ///        Socket _socket;
        ///        EndPoint _remote;
        ///
        ///        public bool Connected { get { return _socket == null ? false : _socket.Connected; } }
        ///
        ///        public int ReceiveTimeout
        ///        {
        ///            get { retur [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_IO_RedisSocket_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_IO_RedisSocket_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Globalization;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.IO
        ///{
        ///    class RedisWriter
        ///    {
        ///        const char Bulk = (char)RedisMessage.Bulk;
        ///        const char MultiBulk = (char)RedisMessage.MultiBulk;
        ///        const string EOL = &quot;\r\n&quot;;
        ///
        ///        readonly RedisIO _io;
        ///
        ///        public RedisWriter(RedisIO io)
        ///        {
        ///            _io = io;
        ///        }
        ///
        ///        public int Write(RedisCommand [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_IO_RedisWriter_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_IO_RedisWriter_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Net.Sockets;
        ///using System.Text;
        ///using System.Threading;
        ///
        ///namespace CSRedis.Internal.IO
        ///{
        ///    class SocketAsyncPool : IDisposable
        ///    {
        ///        readonly byte[] _buffer;
        ///        readonly Stack&lt;SocketAsyncEventArgs&gt; _pool;
        ///        readonly int _bufferSize;
        ///        readonly Semaphore _acquisitionGate;
        ///
        ///        public event EventHandler&lt;SocketAsyncEventArgs&gt; Completed;
        ///
        ///        public SocketAsyncPool(int concurrency [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_IO_SocketAsyncPool_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_IO_SocketAsyncPool_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Concurrent;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Net;
        ///using System.Net.Sockets;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal.IO
        ///{
        ///    class SocketPool : IDisposable
        ///    {
        ///        readonly EndPoint _endPoint;
        ///        readonly ConcurrentStack&lt;Socket&gt; _pool;
        ///        readonly int _max;
        ///
        ///        public SocketPool(EndPoint endPoint, int max)
        ///        {
        ///            _max = max;
        ///            _endPoint = endPoint;
        ///            _poo [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_IO_SocketPool_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_IO_SocketPool_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal
        ///{
        ///    class MonitorListener : RedisListner&lt;object&gt;
        ///    {
        ///        public event EventHandler&lt;RedisMonitorEventArgs&gt; MonitorReceived;
        ///
        ///        public MonitorListener(RedisConnector connection)
        ///            : base(connection)
        ///        { }
        ///
        ///        public string Start()
        ///        {
        ///            string status = Call(RedisCommands.Monitor());
        ///            Listen(x =&gt; x.Read());
        ///            [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_MonitorListener_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_MonitorListener_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.Commands;
        ///using CSRedis.Internal.IO;
        ///using CSRedis.Internal.Utilities;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Reflection;
        ///using System.Threading.Tasks;
        ///
        ///namespace CSRedis
        ///{
        ///    static class RedisCommands
        ///    {
        ///        #region Connection
        ///        public static RedisStatus Auth(string password)
        ///        {
        ///            return new RedisStatus(&quot;AUTH&quot;, password);
        ///        }
        ///        public static RedisString Echo(string message)
        ///        { [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_RedisCommand_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_RedisCommand_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.Collections.Concurrent;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Net;
        ///using System.Net.Sockets;
        ///using System.Text;
        ///using System.Threading;
        ///using System.Threading.Tasks;
        ///
        ///namespace CSRedis.Internal
        ///{
        ///    class RedisConnector
        ///    {
        ///        readonly int _concurrency;
        ///        readonly int _bufferSize;
        ///        readonly Lazy&lt;AsyncConnector&gt; _asyncConnector;
        ///        readonly IRedisSocket _redisSocket; [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_RedisConnector_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_RedisConnector_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Net.Sockets;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal
        ///{
        ///    abstract class RedisListner&lt;TResponse&gt;
        ///    {
        ///        readonly RedisConnector _connection;
        ///
        ///        public bool Listening { get; private set; }
        ///        protected RedisConnector Connection { get { return _connection; } }
        ///
        ///        public RedisListner(RedisConnector connection)
        ///        {
        ///            _conne [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_RedisListener_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_RedisListener_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal
        ///{
        ///    class RedisPipeline : IDisposable
        ///    {
        ///        readonly Stream _buffer;
        ///        readonly Stream _destination;
        ///        readonly RedisWriter _writer;
        ///        readonly RedisReader _reader;
        ///        readonly Queue&lt;Func&lt;object&gt;&gt; _parsers;
        ///
        ///        public bool Active { get; private set; }
        ///
        ///        internal RedisPipeline(RedisIO io)
        /// [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_RedisPipeline_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_RedisPipeline_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.Commands;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace CSRedis.Internal
        ///{
        ///    class RedisTransaction
        ///    {
        ///        readonly RedisConnector _connector;
        ///        readonly RedisArray _execCommand;
        ///        readonly List&lt;Tuple&lt;string, object[]&gt;&gt; _pipeCommands = new List&lt;Tuple&lt;string, object[]&gt;&gt;();
        ///
        ///        public event EventHandler&lt;RedisTransactionQueuedEventArgs&gt; TransactionQueued;
        ///
        ///        b [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_RedisTransaction_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_RedisTransaction_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.Commands;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis.Internal
        ///{
        ///    class SubscriptionListener : RedisListner&lt;RedisSubscriptionResponse&gt;
        ///    {
        ///        long _count;
        ///
        ///        public event EventHandler&lt;RedisSubscriptionReceivedEventArgs&gt; MessageReceived;
        ///        public event EventHandler&lt;RedisSubscriptionChangedEventArgs&gt; Changed;
        ///
        ///        public SubscriptionListener(RedisConnector connection)
        ///            : bas [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_SubscriptionListener_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_SubscriptionListener_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Globalization;
        ///
        ///namespace CSRedis.Internal.Utilities
        ///{
        ///    static class RedisArgs
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// Join arrays
        ///        /// &lt;/summary&gt;
        ///        /// &lt;param name=&quot;arrays&quot;&gt;Arrays to join&lt;/param&gt;
        ///        /// &lt;returns&gt;Array of ToString() elements in each array&lt;/returns&gt;
        ///        public static string[] Concat(params object[][] arrays)
        ///        {
        ///            int count = 0;
        ///            foreach (var ar in arrays)
        ///        [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Utilities_RedisArgs_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Utilities_RedisArgs_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Linq;
        ///using System.Linq.Expressions;
        ///using System.Reflection;
        ///using System.Runtime.Serialization;
        ///
        ///namespace CSRedis.Internal.Utilities
        ///{
        ///    internal static class Serializer&lt;T&gt;
        ///        where T : class
        ///    {
        ///        static readonly Lazy&lt;Func&lt;T, Dictionary&lt;string, string&gt;&gt;&gt;
        ///            _propertySerializer;
        ///        static readonly Lazy&lt;Func&lt;Dictionary&lt;string, string&gt;, T&gt;&gt;
        ///            _propertyDeserializer [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Internal_Utilities_Serializer_cs {
            get {
                return ResourceManager.GetString("CSRedis_Internal_Utilities_Serializer_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Common properties of the RedisClient
        ///    /// &lt;/summary&gt;
        ///    public interface IRedisClient :IDisposable
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// Occurs when a subscription message is received
        ///        /// &lt;/summary&gt;
        ///        event EventHandler&lt;RedisSubscriptionReceivedEventArgs&gt; SubscriptionReceived;
        ///
        ///        /// &lt;summary&gt;
        ///        /// Occurs when a subscription c [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_IRedisClient_cs {
            get {
                return ResourceManager.GetString("CSRedis_IRedisClient_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace CSRedis
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Interface for asyncronous RedisClient methods
        ///    /// &lt;/summary&gt;
        ///    public interface IRedisClientAsync : IRedisClient
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// Open connection to redis server
        ///        /// &lt;/summary&gt;
        ///        /// &lt;returns&gt;True on success&lt;/returns&gt;
        ///        Task&lt;bool&gt; ConnectAsync();
        ///
        ///
        ///
        ///
        ///        /// &lt;summary&gt;
        ///     [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_IRedisClientAsync_cs {
            get {
                return ResourceManager.GetString("CSRedis_IRedisClientAsync_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Interface for syncronous RedisClient methods
        ///    /// &lt;/summary&gt;
        ///    public interface IRedisClientSync : IRedisClient
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// Connect to the remote host
        ///        /// &lt;/summary&gt;
        ///        /// &lt;param name=&quot;timeout&quot;&gt;Connection timeout in milliseconds&lt;/param&gt;
        ///        /// &lt;returns&gt;True if connected&lt;/returns&gt;
        ///        bool Connect(int time [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_IRedisClientSync_cs {
            get {
                return ResourceManager.GetString("CSRedis_IRedisClientSync_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///namespace CSRedis {
        ///	public partial class QuickHelperBase {
        ///		protected static string Name { get; set; }
        ///		public static ConnectionPool Instance { get; protected set; }
        ///		public static bool Set(string key, string value, int expireSeconds = -1) {
        ///			key = string.Concat(Name, key);
        ///			using(var conn = Instance.GetConnection()) {
        ///				if (expireSeconds &gt; 0)
        ///					return conn.Client.Set(key, value, TimeSpan.FromSeconds(expireSeconds)) [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_QuickHelperBase_cs {
            get {
                return ResourceManager.GetString("CSRedis_QuickHelperBase_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Threading.Tasks;
        ///
        ///namespace CSRedis
        ///{
        ///    public partial class RedisClient
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// Open connection to redis server
        ///        /// &lt;/summary&gt;
        ///        /// &lt;returns&gt;True on success&lt;/returns&gt;
        ///        public Task&lt;bool&gt; ConnectAsync()
        ///        {
        ///            return _connector.ConnectAsync();
        ///        }
        ///
        ///        /// &lt;summary&gt;
        ///        /// Call arbitrary redis command
        ///        /// &lt;/summary&gt;
        ///        /// &lt;param n [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_RedisClient_Async_cs {
            get {
                return ResourceManager.GetString("CSRedis_RedisClient_Async_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System.Globalization;
        ///using System.Threading;
        ///using CSRedis.Internal;
        ///using System;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.IO;
        ///using CSRedis.Internal.IO;
        ///using System.Net;
        ///
        ///namespace CSRedis
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Represents a client connection to a Redis server instance
        ///    /// &lt;/summary&gt;
        ///    public partial class RedisClient : IRedisClientSync, IRedisClientAsync
        ///    {
        ///        const int DefaultPort = 6379;
        ///        const bool DefaultSSL = false;
        ///        co [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_RedisClient_cs {
            get {
                return ResourceManager.GetString("CSRedis_RedisClient_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.Commands;
        ///using System;
        ///using System.Collections.Generic;
        ///
        ///namespace CSRedis
        ///{
        ///    public partial class RedisClient
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// Connect to the remote host
        ///        /// &lt;/summary&gt;
        ///        /// &lt;param name=&quot;timeout&quot;&gt;Connection timeout in milliseconds&lt;/param&gt;
        ///        /// &lt;returns&gt;True if connected&lt;/returns&gt;
        ///        public bool Connect(int timeout)
        ///        {
        ///            return _connector.Connect(); // TODO timeout
        ///        }
        ///
        ///        /// &lt;summary [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_RedisClient_Sync_cs {
            get {
                return ResourceManager.GetString("CSRedis_RedisClient_Sync_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.IO;
        ///using System;
        ///using System.Collections.Concurrent;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Net;
        ///using System.Net.Sockets;
        ///using System.Text;
        ///
        ///namespace CSRedis
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Represents a pooled collection of Redis connections
        ///    /// &lt;/summary&gt;
        ///    public class RedisConnectionPool : IDisposable
        ///    {
        ///        readonly EndPoint _endPoint;
        ///        readonly SocketPool _pool;
        ///		//readonly string pass;
        ///		//read [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_RedisConnectionPool_cs {
            get {
                return ResourceManager.GetString("CSRedis_RedisConnectionPool_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.Commands;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace CSRedis
        ///{
        ///    public partial class RedisSentinelClient
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// Connect to the remote host
        ///        /// &lt;/summary&gt;
        ///        /// &lt;returns&gt;True if connected&lt;/returns&gt;
        ///        public Task&lt;bool&gt; ConnectAsync()
        ///        {
        ///            return _connector.ConnectAsync();
        ///        }
        ///
        ///        /// &lt;summary&gt;
        ///        [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_RedisSentinelClient_Async_cs {
            get {
                return ResourceManager.GetString("CSRedis_RedisSentinelClient_Async_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal;
        ///using CSRedis.Internal.Commands;
        ///using CSRedis.Internal.IO;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Net;
        ///using System.Runtime.Serialization;
        ///using System.Text;
        ///
        ///namespace CSRedis
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Represents a client connection to a Redis sentinel instance
        ///    /// &lt;/summary&gt;
        ///    public partial class RedisSentinelClient : IDisposable
        ///    {
        ///        const int DefaultPort = 26379;
        ///        const bool DefaultSSL = false;
        ///        const int De [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_RedisSentinelClient_cs {
            get {
                return ResourceManager.GetString("CSRedis_RedisSentinelClient_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using CSRedis.Internal.Commands;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///
        ///namespace CSRedis
        ///{
        ///    public partial class RedisSentinelClient
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// Connect to the remote host
        ///        /// &lt;/summary&gt;
        ///        /// &lt;param name=&quot;timeout&quot;&gt;Connection timeout in milliseconds&lt;/param&gt;
        ///        /// &lt;returns&gt;True if connected&lt;/returns&gt;
        ///        public bool Connect(int timeout)
        ///        {
        ///            return _connector.Connect(); // [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_RedisSentinelClient_Sync_cs {
            get {
                return ResourceManager.GetString("CSRedis_RedisSentinelClient_Sync_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Threading.Tasks;
        ///
        ///// http://redis.io/topics/sentinel-clients
        ///
        ///namespace CSRedis
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Represents a managed connection to a Redis master instance via a set of Redis sentinel nodes
        ///    /// &lt;/summary&gt;
        ///    public class RedisSentinelManager : IDisposable
        ///    {
        ///        const int DefaultPort = 26379;
        ///        readonly LinkedList&lt;Tuple&lt;string, int&gt;&gt; _sentinels;
        ///        string _masterName;
        ///        int  [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_RedisSentinelManager_cs {
            get {
                return ResourceManager.GetString("CSRedis_RedisSentinelManager_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 
        ///using System;
        ///using System.Runtime.Serialization;
        ///namespace CSRedis
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Sub-command used by Redis OBJECT command
        ///    /// &lt;/summary&gt;
        ///    public enum RedisObjectSubCommand
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// Return the number of references of the value associated with the specified key
        ///        /// &lt;/summary&gt;
        ///        RefCount,
        ///
        ///        /// &lt;summary&gt;
        ///        /// Return the number of seconds since the object stored at the specified key is idle
        ///        /// &lt;/summary&gt;        /// [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string CSRedis_Types_cs {
            get {
                return ResourceManager.GetString("CSRedis_Types_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Text.RegularExpressions;
        ///using System.Threading.Tasks;
        ///using System.Xml.Linq;
        ///
        ///namespace FastExcel {
        ///	/// &lt;summary&gt;
        ///	/// Contains the actual value
        ///	/// &lt;/summary&gt;
        ///	public class Cell {
        ///		/// &lt;summary&gt;
        ///		/// Column Numnber (Starts at 1)
        ///		/// &lt;/summary&gt;
        ///		public int ColumnNumber { get; set; }
        ///
        ///		/// &lt;summary&gt;
        ///		/// The value that is stored
        ///		/// &lt;/summary&gt;
        ///		public object Value { get; set; } [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string FastExcel_Cell_cs {
            get {
                return ResourceManager.GetString("FastExcel_Cell_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.IO.Compression;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Xml.Linq;
        ///
        ///namespace FastExcel {
        ///	public partial class FastExcel {
        ///		/// &lt;summary&gt;
        ///		/// Append new worksheet
        ///		/// &lt;/summary&gt;
        ///		/// &lt;param name=&quot;worksheet&quot;&gt;New worksheet&lt;/param&gt;
        ///		public void Add(Worksheet worksheet) {
        ///			this.Add(worksheet, null, null);
        ///		}
        ///
        ///		public void Add(Worksheet worksheet, int insertAfterShe [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string FastExcel_FastExcel_Add_cs {
            get {
                return ResourceManager.GetString("FastExcel_FastExcel_Add_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.IO.Compression;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Xml.Linq;
        ///
        ///namespace FastExcel {
        ///	public partial class FastExcel : IDisposable {
        ///		public FileInfo ExcelFile { get; private set; }
        ///		public FileInfo TemplateFile { get; private set; }
        ///		public bool ReadOnly { get; private set; }
        ///
        ///		internal SharedStrings SharedStrings { get; set; }
        ///		internal ZipArchive Archive { get; set; }
        ///		private bool UpdateExi [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string FastExcel_FastExcel_cs {
            get {
                return ResourceManager.GetString("FastExcel_FastExcel_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.IO.Compression;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Xml.Linq;
        ///
        ///namespace FastExcel {
        ///	public partial class FastExcel {
        ///		/// &lt;summary&gt;
        ///		/// Deletes the selected sheet Note:delete happens on Dispose
        ///		/// &lt;/summary&gt;
        ///		/// &lt;param name=&quot;sheetNumber&quot;&gt;sheet number, starts at 1&lt;/param&gt;
        ///		public void Delete(int sheetNumber) {
        ///			this.Delete(sheetNumber, null);
        ///		}
        ///
        ///		/// &lt;s [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string FastExcel_FastExcel_Delete_cs {
            get {
                return ResourceManager.GetString("FastExcel_FastExcel_Delete_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Xml.Linq;
        ///
        ///namespace FastExcel {
        ///	public partial class FastExcel {
        ///		public Worksheet Read(int sheetNumber, int existingHeadingRows = 0) {
        ///			return Read(sheetNumber, null, existingHeadingRows);
        ///		}
        ///
        ///		public Worksheet Read(string sheetName, int existingHeadingRows = 0) {
        ///			return Read(null, sheetName, existingHeadingRows);
        ///		}
        ///
        ///		private Worksheet Read(int? sheetNumber = null, string sheet [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string FastExcel_FastExcel_Read_cs {
            get {
                return ResourceManager.GetString("FastExcel_FastExcel_Read_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.IO.Compression;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Xml.Linq;
        ///
        ///namespace FastExcel {
        ///	public partial class FastExcel {
        ///		/// &lt;summary&gt;
        ///		/// Update the worksheet
        ///		/// &lt;/summary&gt;
        ///		/// &lt;param name=&quot;data&quot;&gt;The worksheet&lt;/param&gt;
        ///		/// &lt;param name=&quot;sheetNumber&quot;&gt;eg 1,2,4&lt;/param&gt;
        ///		public void Update(Worksheet data, int sheetNumber) {
        ///			this.Update(data, sheetNumber, null);        /// [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string FastExcel_FastExcel_Update_cs {
            get {
                return ResourceManager.GetString("FastExcel_FastExcel_Update_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Xml.Linq;
        ///
        ///namespace FastExcel {
        ///	public partial class FastExcel {
        ///		private Worksheet[] _worksheets;
        ///
        ///		/// &lt;summary&gt;
        ///		/// List of worksheets, loaded on first access of property
        ///		/// &lt;/summary&gt;
        ///		public Worksheet[] Worksheets {
        ///			get {
        ///				if (_worksheets != null) {
        ///					return _worksheets;
        ///				} else {
        ///					_worksheets = GetWorksheetProper [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string FastExcel_FastExcel_Worksheets_cs {
            get {
                return ResourceManager.GetString("FastExcel_FastExcel_Worksheets_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.IO.Compression;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Xml.Linq;
        ///
        ///namespace FastExcel {
        ///	public partial class FastExcel {
        ///		/// &lt;summary&gt;
        ///		/// Write data to a sheet
        ///		/// &lt;/summary&gt;
        ///		/// &lt;param name=&quot;worksheet&quot;&gt;A dataset&lt;/param&gt;
        ///		public void Write(Worksheet worksheet) {
        ///			this.Write(worksheet, null, null);
        ///		}
        ///
        ///		/// &lt;summary&gt;
        ///		/// Write data to a sheet
        ///		/// &lt;/su [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string FastExcel_FastExcel_Write_cs {
            get {
                return ResourceManager.GetString("FastExcel_FastExcel_Write_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Xml.Linq;
        ///
        ///namespace FastExcel
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Row that contains the Cells
        ///    /// &lt;/summary&gt;
        ///    public class Row
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// The Row Number (Row numbers start at 1)
        ///        /// &lt;/summary&gt;
        ///        public int RowNumber { get; set; }
        ///
        ///        /// &lt;summary&gt;
        ///        /// The collection of cells for this row
        ///        /// &lt;/sum [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string FastExcel_Row_cs {
            get {
                return ResourceManager.GetString("FastExcel_Row_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.IO.Compression;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Xml.Linq;
        ///
        ///namespace FastExcel
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Read and update xl/sharedStrings.xml file
        ///    /// &lt;/summary&gt;
        ///    public class SharedStrings
        ///    {
        ///        //A dictionary is a lot faster than a list
        ///        private Dictionary&lt;string, int&gt; StringDictionary { get; set; }
        ///        private Dictionary&lt;int, string&gt;  [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string FastExcel_SharedStrings_cs {
            get {
                return ResourceManager.GetString("FastExcel_SharedStrings_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Linq;
        ///using System.Reflection;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.IO.Compression;
        ///using System.IO;
        ///using System.Xml.Linq;
        ///
        ///namespace FastExcel
        ///{
        ///    public class Worksheet
        ///    {
        ///        /// &lt;summary&gt;
        ///        /// Collection of rows in this worksheet
        ///        /// &lt;/summary&gt;
        ///        public IEnumerable&lt;Row&gt; Rows { get; set; }
        ///
        ///        public IEnumerable&lt;string&gt; Headings { get;  [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string FastExcel_Worksheet_cs {
            get {
                return ResourceManager.GetString("FastExcel_Worksheet_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace FastExcel
        ///{
        ///    internal class WorksheetAddSettings
        ///    {
        ///        public string Name { get; set; }
        ///
        ///        public int SheetId { get; set; }
        ///
        ///        public int InsertAfterSheetId { get; set; }
        ///    }
        ///}
        /// 的本地化字符串。
        /// </summary>
        internal static string FastExcel_WorksheetAddSettings_cs {
            get {
                return ResourceManager.GetString("FastExcel_WorksheetAddSettings_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找 System.Byte[] 类型的本地化资源。
        /// </summary>
        internal static byte[] htm_zip {
            get {
                object obj = ResourceManager.GetObject("htm_zip", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   查找类似 using Microsoft.AspNetCore.Http;
        ///using Microsoft.AspNetCore.Mvc;
        ///using Microsoft.AspNetCore.Mvc.Filters;
        ///using Microsoft.Extensions.Logging;
        ///using Newtonsoft.Json;
        ///using System;
        ///using System.Collections;
        ///using System.Linq;
        ///using System.Threading.Tasks;
        ///
        ///[ServiceFilter(typeof(CustomExceptionFilter))]
        ///public partial class BaseController : Controller {
        ///	public ILogger _logger;
        ///	public ISession Session { get { return HttpContext.Session; } }
        ///	public HttpRequest Req { get { return Request; } }
        ///	pu [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Infrastructure_Controllers_BaseController_cs {
            get {
                return ResourceManager.GetString("Infrastructure_Controllers_BaseController_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using Microsoft.AspNetCore.Hosting;
        ///using Microsoft.AspNetCore.Http;
        ///using Microsoft.AspNetCore.Mvc;
        ///using Microsoft.AspNetCore.Mvc.Filters;
        ///using Microsoft.Extensions.Configuration;
        ///using Microsoft.Extensions.Logging;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Security.Cryptography;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///public class CustomExceptionFilter : Attribute, IExceptionFilter {
        ///	private ILogger _logger = null;
        ///	private IConfigurationRoot _cfg = null;
        ///	pr [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Infrastructure_Controllers_CustomExceptionFilter_cs {
            get {
                return ResourceManager.GetString("Infrastructure_Controllers_CustomExceptionFilter_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using Newtonsoft.Json;
        ///using System;
        ///using System.Text.RegularExpressions;
        ///
        ///public static class GlobalExtensions {
        ///	public static object Json(this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper html, object obj) {
        ///		string str = JsonConvert.SerializeObject(obj);
        ///		if (!string.IsNullOrEmpty(str)) str = Regex.Replace(str, @&quot;&lt;(/?script[\s&gt;])&quot;, &quot;&lt;\&quot;+\&quot;$1&quot;, RegexOptions.IgnoreCase);
        ///		if (html == null) return str;
        ///		return html.Raw(str);
        ///	}
        ///
        ///	/// &lt;summary&gt;
        ///	/// 转格林时间，并以ISO8601格式化字符串
        ///	/// &lt;/summary&gt; [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Infrastructure_Extensions_GlobalExtensions_cs {
            get {
                return ResourceManager.GetString("Infrastructure_Extensions_GlobalExtensions_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using Microsoft.AspNetCore.Builder;
        ///using Microsoft.Extensions.DependencyInjection;
        ///
        ///public interface IModuleInitializer {
        ///	void Init(IApplicationBuilder services);
        ///} 的本地化字符串。
        /// </summary>
        internal static string Infrastructure_ModuleBasic_IModuleInitializer_cs {
            get {
                return ResourceManager.GetString("Infrastructure_ModuleBasic_IModuleInitializer_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System.Linq;
        ///using System.Reflection;
        ///
        ///public class ModuleInfo {
        ///	public string Name { get; set; }
        ///
        ///	public Assembly Assembly { get; set; }
        ///
        ///	public string ShortName {
        ///		get {
        ///			return Name.Split(&apos;.&apos;).Last();
        ///		}
        ///	}
        ///
        ///	public string Path { get; set; }
        ///} 的本地化字符串。
        /// </summary>
        internal static string Infrastructure_ModuleBasic_ModuleInfo_cs {
            get {
                return ResourceManager.GetString("Infrastructure_ModuleBasic_ModuleInfo_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using Microsoft.AspNetCore.Mvc.Razor;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///public class ModuleViewLocationExpander : IViewLocationExpander {
        ///	private const string _moduleKey = &quot;module&quot;;
        ///
        ///	public IEnumerable&lt;string&gt; ExpandViewLocations(ViewLocationExpanderContext context, IEnumerable&lt;string&gt; viewLocations) {
        ///		if (context.Values.ContainsKey(_moduleKey)) {
        ///			var module = context.Values[_moduleKey];
        ///			if (!string.IsNullOrWhiteSpace(module)) {
        ///				var moduleViewLocations = new stri [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Infrastructure_ModuleBasic_ModuleViewLocationExpander_cs {
            get {
                return ResourceManager.GetString("Infrastructure_ModuleBasic_ModuleViewLocationExpander_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Collections.Specialized;
        ///using System.Text;
        ///using System.Text.RegularExpressions;
        ///using System.Threading;
        ///using System.IO;
        ///
        ///public class IniHelper {
        ///	private static Dictionary&lt;string, object&gt; _cache = new Dictionary&lt;string, object&gt;();
        ///	private static Dictionary&lt;string, FileSystemWatcher&gt; _watcher = new Dictionary&lt;string, FileSystemWatcher&gt;();
        ///	private static object _lock = new object();
        ///
        ///	private static object loadAndCache(string path [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Lib_IniHelper_cs {
            get {
                return ResourceManager.GetString("Lib_IniHelper_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Text;
        ///using System.Text.RegularExpressions;
        ///
        ///public class JSDecoder {
        ///	private const byte STATE_COPY_INPUT = 100;
        ///	private const byte STATE_READLEN = 101;
        ///	private const byte STATE_DECODE = 102;
        ///	private const byte STATE_UNESCAPE = 103;
        ///
        ///	private static byte[] _pickEncoding;
        ///	private static byte[] _rawData;
        ///	private static byte[] _digits = new byte[123];
        ///	private static byte[][] _transformed = new byte[3][];
        ///
        ///	static JSDecoder() {
        ///		InitArrayData();
        ///	}
        ///
        ///	private [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Lib_JSDecoder_cs {
            get {
                return ResourceManager.GetString("Lib_JSDecoder_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Reflection;
        ///using System.Text;
        ///using System.Net;
        ///using System.Threading;
        ///using System.Runtime.Serialization.Json;
        ///using Newtonsoft.Json;
        ///using Newtonsoft.Json.Linq;
        ///using PList;
        ///
        ///public delegate void AnonymousHandler();
        ///
        ////// &lt;summary&gt;
        ////// 常用函数库
        ////// &lt;/summary&gt;
        ///public class Lib {
        ///
        ///	/// &lt;summary&gt;
        ///	/// 当前程序类型是否为 Web Application
        ///	/// &lt;/summary&gt;
        ///
        ///	public static string HtmlEncode(object input) { return WebUtility.H [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Lib_Lib_cs {
            get {
                return ResourceManager.GetString("Lib_Lib_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Threading.Tasks;
        ///using Microsoft.Extensions.Caching.Distributed;
        ///using Microsoft.Extensions.Options;
        ///using System.Text;
        ///using System.Threading;
        ///
        ///namespace Microsoft.Extensions.Caching.Redis {
        ///	public class RedisSuperCache : IDistributedCache {
        ///
        ///		public byte[] Get(string key) {
        ///			return this.GetAsync(key, CancellationToken.None).Result;
        ///		}
        ///		public Task&lt;byte[]&gt; GetAsync(string key, CancellationToken token) {
        ///			if (key == null) throw new ArgumentNullException(nameo [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Microsoft_Extensions_Caching_Redis_RedisSuperCache_cs {
            get {
                return ResourceManager.GetString("Microsoft_Extensions_Caching_Redis_RedisSuperCache_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Threading;
        ///using System.Text.RegularExpressions;
        ///using Microsoft.Extensions.Logging;
        ///
        ///namespace Npgsql {
        ///	/// &lt;summary&gt;
        ///	/// 数据库链接池
        ///	/// &lt;/summary&gt;
        ///	public partial class ConnectionPool {
        ///
        ///		public int MaxPoolSize = 32;
        ///		public List&lt;Connection2&gt; AllConnections = new List&lt;Connection2&gt;();
        ///		public Queue&lt;Connection2&gt; FreeConnections = new Queue&lt;Connection2&gt;();
        ///		public Queue&lt;ManualResetEvent&gt; GetConnectionQueue = new Queue&lt;ManualResetE [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Npgsql_ConnectionPool_cs {
            get {
                return ResourceManager.GetString("Npgsql_ConnectionPool_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Data;
        ///using System.Linq;
        ///using System.Reflection;
        ///using System.Threading;
        ///using Microsoft.Extensions.Logging;
        ///using Newtonsoft.Json.Linq;
        ///using NpgsqlTypes;
        ///
        ///namespace Npgsql {
        ///	public partial class Executer : IDisposable {
        ///
        ///		public ILogger Log { get; set; }
        ///		public ConnectionPool Pool { get; }
        ///		public Executer() { }
        ///		public Executer(ILogger log, string connectionString)  [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Npgsql_Executer_cs {
            get {
                return ResourceManager.GetString("Npgsql_Executer_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Net;
        ///using System.Net.NetworkInformation;
        ///using System.Threading.Tasks;
        ///using Newtonsoft.Json.Linq;
        ///using Npgsql;
        ///using NpgsqlTypes;
        ///
        ///namespace Newtonsoft.Json {
        ///	public class NpgsqlTypesConverter : JsonConverter {
        ///		private static readonly Type typeof_BitArray = typeof(BitArray);
        ///
        ///		private static readonly Type typeof_NpgsqlPoint = typeof(NpgsqlPoint);
        ///		private static readonly Type typ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Npgsql_NpgsqlTypesConverter_cs {
            get {
                return ResourceManager.GetString("Npgsql_NpgsqlTypesConverter_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Text.RegularExpressions;
        ///using System.Reflection;
        ///using System.Data;
        ///using System.Linq;
        ///using Newtonsoft.Json;
        ///
        ///namespace Npgsql {
        ///	public partial interface IDAL {
        ///		string Table { get; }
        ///		string Field { get; }
        ///		string Sort { get; }
        ///		object GetItem(NpgsqlDataReader dr, ref int index);
        ///	}
        ///	public class SelectBuild&lt;TReturnInfo, TLinket&gt; : SelectBuild&lt;TReturnInfo&gt; where TLinket : SelectBuild&lt;TReturnInfo&gt; {
        ///		protected SelectBuild&lt;T [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Npgsql_SelectBuild_cs {
            get {
                return ResourceManager.GetString("Npgsql_SelectBuild_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 /**
        /// * NPinyin包含一个公开类Pinyin，该类实现了取汉字文本首字母、文本对应拼音、以及
        /// * 获取和拼音对应的汉字列表等方法。由于汉字字库大，且多音字较多，因此本组中实现的
        /// * 拼音转换不一定和词语中的字的正确读音完全吻合。但绝大部分是正确的。
        /// * 
        /// * 最后感谢百度网友韦祎提供的常用汉字拼音对照表。见下载地址：
        /// * http://wenku.baidu.com/view/d725f4335a8102d276a22f46.html
        /// * 
        /// * 最后，我想简要地说明一下我的设计思路：
        /// * 首先，我将汉字按拼音分组后建立一个字符串数组（见PyCode.codes），然后使用程序
        /// * 将PyCode.codes中每一个汉字通过其编码值使用散列函数：
        /// * 
        /// *     f(x) = x % PyCode.codes.Length
        /// *   { 
        /// *     g(f(x)) = pos(x)
        /// *     
        /// * 其中, pos(x)为字符x所属字符串所在的PyCode.codes的数组下标, 然后散列到同
        /// * PyCode.codes长度相同长度 [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string NPinyin_Pinyin_cs {
            get {
                return ResourceManager.GetString("NPinyin_Pinyin_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///
        ///namespace NPinyin
        ///{
        ///  internal class PyCode
        ///  {
        ///    internal static string[] codes = new string[]{
        ///&quot;a     :阿啊吖嗄腌锕&quot;,
        ///&quot;ai    :爱埃碍矮挨唉哎哀皑癌蔼艾隘捱嗳嗌嫒瑷暧砹锿霭&quot;,
        ///&quot;an    :安按暗岸案俺氨胺鞍谙埯揞犴庵桉铵鹌黯&quot;,
        ///&quot;ang   :昂肮盎&quot;,
        ///&quot;ao    :凹奥敖熬翱袄傲懊澳坳拗嗷岙廒遨媪骜獒聱螯鏊鳌鏖&quot;,
        ///&quot;ba    :把八吧巴拔霸罢爸坝芭捌扒叭笆疤跋靶耙茇菝岜灞钯粑鲅魃&quot;,
        ///&quot;bai   :百白败摆柏佰拜稗捭掰&quot;,
        ///&quot;ban   :办半板班般版拌搬斑扳伴颁扮瓣绊阪坂钣瘢癍舨&quot;,
        ///&quot;bang  :帮棒邦榜梆膀绑磅蚌镑傍谤蒡浜&quot;,
        ///&quot;bao   :报保包剥薄胞暴宝饱抱爆堡苞褒雹豹鲍葆孢煲鸨褓趵龅&quot;,
        ///&quot;bei   :北被倍备背辈贝杯卑悲碑钡狈惫焙孛陂邶埤萆蓓呗悖碚鹎褙鐾鞴&quot;,
        ///&quot;ben   :本 [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string NPinyin_PyCode_cs {
            get {
                return ResourceManager.GetString("NPinyin_PyCode_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///
        ///namespace NPinyin
        ///{
        ///  internal class PyHash
        ///  {
        ///    internal static short[][] hashes = new short[][] {
        ///new short[]{23, 70, 96, 128, 154, 165, 172, 195},
        ///new short[]{25, 35, 87, 108, 120, 128, 132, 137, 168, 180, 325, 334, 336, 353, 361, 380},
        ///new short[]{23, 34, 46, 81, 82, 87, 134, 237, 255, 288, 317, 322, 354, 359},
        ///new short[]{7, 11, 37, 49, 53, 56, 131, 132, 146, 176, 315, 372},
        ///new short[]{11, 69, 73, 87, 96, 103, 159, 175 [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string NPinyin_PyHash_cs {
            get {
                return ResourceManager.GetString("NPinyin_PyHash_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_ASCIIPropertyListParser_cs {
            get {
                return ResourceManager.GetString("plist_cil_ASCIIPropertyListParser_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_BinaryPropertyListParser_cs {
            get {
                return ResourceManager.GetString("plist_cil_BinaryPropertyListParser_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_BinaryPropertyListWriter_cs {
            get {
                return ResourceManager.GetString("plist_cil_BinaryPropertyListWriter_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_NSArray_cs {
            get {
                return ResourceManager.GetString("plist_cil_NSArray_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2016 Quamotion
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the rights
        ///// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        ///// copies of the Software, and to permit persons to whom the Softwar [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_NSArray_IList_cs {
            get {
                return ResourceManager.GetString("plist_cil_NSArray_IList_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_NSData_cs {
            get {
                return ResourceManager.GetString("plist_cil_NSData_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_NSDate_cs {
            get {
                return ResourceManager.GetString("plist_cil_NSDate_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_NSDictionary_cs {
            get {
                return ResourceManager.GetString("plist_cil_NSDictionary_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_NSNumber_cs {
            get {
                return ResourceManager.GetString("plist_cil_NSNumber_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_NSObject_cs {
            get {
                return ResourceManager.GetString("plist_cil_NSObject_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_NSSet_cs {
            get {
                return ResourceManager.GetString("plist_cil_NSSet_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_NSString_cs {
            get {
                return ResourceManager.GetString("plist_cil_NSString_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        ///// Copyright (C) 2016 Quamotion
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, incl [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_PropertyListException_cs {
            get {
                return ResourceManager.GetString("plist_cil_PropertyListException_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_PropertyListFormatException_cs {
            get {
                return ResourceManager.GetString("plist_cil_PropertyListFormatException_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_PropertyListParser_cs {
            get {
                return ResourceManager.GetString("plist_cil_PropertyListParser_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_UID_cs {
            get {
                return ResourceManager.GetString("plist_cil_UID_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // plist-cil - An open source library to parse and generate property lists for .NET
        ///// Copyright (C) 2015 Natalia Portillo
        /////
        ///// This code is based on:
        ///// plist - An open source library to parse and generate property lists
        ///// Copyright (C) 2014 Daniel Dreibrodt
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the righ [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string plist_cil_XmlPropertyListParser_cs {
            get {
                return ResourceManager.GetString("plist_cil_XmlPropertyListParser_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Threading;
        ///using System.Text.RegularExpressions;
        ///using Microsoft.Extensions.Logging;
        ///
        ///namespace StackExchange.Redis {
        ///	/// &lt;summary&gt;
        ///	/// ConnectionMultiplexer链接池
        ///	/// &lt;/summary&gt;
        ///	public partial class ConnectionMultiplexerPool {
        ///
        ///		public List&lt;RedisConnectionMultiplexer2&gt; AllConnections = new List&lt;RedisConnectionMultiplexer2&gt;();
        ///		public Queue&lt;RedisConnectionMultiplexer2&gt; FreeConnections = new Queue&lt;RedisConnectionMultiplexer2&gt;();
        ///		 [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string StackExchange_Redis_ConnectionMultiplexerPool_cs {
            get {
                return ResourceManager.GetString("StackExchange_Redis_ConnectionMultiplexerPool_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///namespace StackExchange.Redis {
        ///	public partial class QuickHelperBase {
        ///		protected static string Name { get; set; }
        ///		public static ConnectionMultiplexerPool Instance { get; protected set; }
        ///		public static bool Set(string key, string value, int expireSeconds = -1) {
        ///			key = string.Concat(Name, key);
        ///			using (var conn = Instance.GetConnection()) {
        ///				if (expireSeconds &gt; 0)
        ///					return conn.Database.StringSet(key, value, Time [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string StackExchange_Redis_QuickHelperBase_cs {
            get {
                return ResourceManager.GetString("StackExchange_Redis_QuickHelperBase_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 [Mm]odule/
        ///wwwroot/[Mm]odule/ 的本地化字符串。
        /// </summary>
        internal static string WebHost_gitignore {
            get {
                return ResourceManager.GetString("WebHost_gitignore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 &quot;use strict&quot;;
        ///
        ///var gulp = require(&apos;gulp&apos;),
        ///    clean = require(&apos;gulp-clean&apos;),
        ///    glob = require(&quot;glob&quot;);
        ///
        ///var paths = {
        ///    devModule: &quot;../Module/&quot;,
        ///    hostModule: &quot;./Module/&quot;,
        ///    hostWwwrootModules: &quot;./wwwroot/module/&quot;
        ///};
        ///
        ///var modules = loadModules();
        ///
        ///gulp.task(&apos;clean-module&apos;, function () {
        ///    return gulp.src([paths.hostModule + &apos;*&apos;, paths.hostWwwrootModules + &apos;*&apos;], { read: false })
        ///    .pipe(clean());
        ///});
        ///
        ///gulp.task(&apos;copy-module&apos;, [&apos;clean-module&apos;], function () {
        ///	modules.forEach(f [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string WebHost_gulpfile_js {
            get {
                return ResourceManager.GetString("WebHost_gulpfile_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 {
        ///	&quot;version&quot;: &quot;1.0.0&quot;,
        ///	&quot;name&quot;: &quot;aaa&quot;,
        ///	&quot;private&quot;: true,
        ///	&quot;devDependencies&quot;: {
        ///		&quot;gulp&quot;: &quot;3.9.1&quot;,
        ///		&quot;gulp-clean&quot;: &quot;0.3.2&quot;,
        ///		&quot;glob&quot;: &quot;7.1.1&quot;
        ///	}
        ///} 的本地化字符串。
        /// </summary>
        internal static string WebHost_package_json {
            get {
                return ResourceManager.GetString("WebHost_package_json", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;configuration&gt;
        ///
        ///  &lt;!--
        ///    Configure your application settings in appsettings.json. Learn more at http://go.microsoft.com/fwlink/?LinkId=786380
        ///  --&gt;
        ///
        ///  &lt;system.webServer&gt;
        ///    &lt;handlers&gt;
        ///      &lt;add name=&quot;aspNetCore&quot; path=&quot;*&quot; verb=&quot;*&quot; modules=&quot;AspNetCoreModule&quot; resourceType=&quot;Unspecified&quot;/&gt;
        ///    &lt;/handlers&gt;
        ///    &lt;aspNetCore processPath=&quot;%LAUNCHER_PATH%&quot; arguments=&quot;%LAUNCHER_ARGS%&quot; stdoutLogEnabled=&quot;false&quot; stdoutLogFile=&quot;.\logs\stdout&quot; forwardWindowsAuthToken=&quot;f [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string WebHost_web_config {
            get {
                return ResourceManager.GetString("WebHost_web_config", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Text;
        ///using System.Text.RegularExpressions;
        ///using System.Threading;
        ///
        ////// &lt;summary&gt;
        ////// 作业调度器，一般运行在控制台
        ////// &lt;/summary&gt;
        ///public class Robot : IDisposable {
        ///
        ///	private string _def_path;
        ///	private List&lt;RobotDef&gt; _robots;
        ///	private Dictionary&lt;string, RobotDef&gt; _dic_robots = new Dictionary&lt;string, RobotDef&gt;();
        ///	private object _robots_lock = new object();
        ///	private FileSystemWatcher _defWatcher;
        ///	public event RobotErrorHandler [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string WinFormClass_Robot_cs {
            get {
                return ResourceManager.GetString("WinFormClass_Robot_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.IO;
        ///using System.IO.Compression;
        ///using System.Globalization;
        ///using System.Text;
        ///using System.Threading;
        ///
        ///public class BaseSocket {
        ///
        ///	public static byte[] Read(Stream stream, byte[] end) {
        ///		using (MemoryStream ms = new MemoryStream()) {
        ///			byte[] data = new byte[1];
        ///			int bytes = data.Length;
        ///			while (bytes &gt; 0 &amp;&amp; BaseSocket.findBytes(ms.ToArray(), end, 0) == -1) {
        ///				bytes = stream.Read(data, 0, data.Length);
        ///				ms.Write(data, 0, data.Length);
        ///			}
        ///			return  [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string WinFormClass_Socket_BaseSocket_cs {
            get {
                return ResourceManager.GetString("WinFormClass_Socket_BaseSocket_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Net.Sockets;
        ///using System.Threading;
        ///
        ///public class ClientSocket : BaseSocket, IDisposable {
        ///
        ///	private bool _isDisposed;
        ///	private TcpClient _tcpClient;
        ///	private Thread _thread;
        ///	private bool _running;
        ///	private int _receives;
        ///	private int _errors;
        ///	private object _errors_lock = new object();
        ///	private object _write_lock = new object();
        ///	private Dictionary&lt;int, SyncReceive&gt; _receiveHandlers = new Dictionary&lt;int, SyncReceive&gt;();
        ///	privat [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string WinFormClass_Socket_ClientSocket_cs {
            get {
                return ResourceManager.GetString("WinFormClass_Socket_ClientSocket_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Net;
        ///using System.Net.Sockets;
        ///using System.Text;
        ///using System.Threading;
        ///
        ///public class ServerSocket : IDisposable {
        ///
        ///	private TcpListener _tcpListener;
        ///	private Thread _tcpListenerThread;
        ///	private Dictionary&lt;int, AcceptSocket&gt; _clients = new Dictionary&lt;int, AcceptSocket&gt;();
        ///	private object _clients_lock = new object();
        ///	private int _id = 1;
        ///	private int _port;
        ///	private bool _running;
        ///	private ManualResetEvent _stopWait;
        ///	public e [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string WinFormClass_Socket_ServerSocket_cs {
            get {
                return ResourceManager.GetString("WinFormClass_Socket_ServerSocket_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///using System.Threading;
        ///
        ///public class WorkQueue : WorkQueue&lt;AnonymousHandler&gt; {
        ///	public WorkQueue() : this(16, -1) { }
        ///	public WorkQueue(int thread)
        ///		: this(thread, -1) {
        ///	}
        ///	public WorkQueue(int thread, int capacity) {
        ///		base.Thread = thread;
        ///		base.Capacity = capacity;
        ///		base.Process += delegate(AnonymousHandler ah) {
        ///			ah();
        ///		};
        ///	}
        ///}
        ///
        ///public class WorkQueue&lt;T&gt; : IDisposable {
        ///	public delegate void WorkQueueProcessHa [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string WinFormClass_WorkQueue_cs {
            get {
                return ResourceManager.GetString("WinFormClass_WorkQueue_cs", resourceCulture);
            }
        }
    }
}
